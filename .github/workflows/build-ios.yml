name: Build iOS
on:
  workflow_dispatch:

# REQUIREMENTS:
# 1. Godot export preset named "iOS" must exist in export_presets.cfg
# 2. For signed builds, set repository variable ENABLE_CODE_SIGNING to 'true'
# 3. For signed builds, add these GitHub secrets:
#    - APPLE_DEVELOPER_TEAM_ID: Your 10-character Apple Developer Team ID
#    - IOS_CERTIFICATE_BASE64: Base64 encoded .p12 certificate
#    - IOS_CERTIFICATE_PASSWORD: Password for the certificate
#    - IOS_PROVISIONING_PROFILE_BASE64: Base64 encoded .mobileprovision file
# 4. Ensure your export_presets.cfg has proper bundle identifier and team ID

jobs:
  build:
    runs-on: macos-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download Godot 4.4
      run: |
        wget https://github.com/godotengine/godot/releases/download/4.4-stable/Godot_v4.4-stable_macos.universal.zip
        unzip Godot_v4.4-stable_macos.universal.zip -d godot
        sudo mv godot/Godot.app /Applications/Godot.app
        sudo ln -s /Applications/Godot.app/Contents/MacOS/Godot /usr/local/bin/godot
        
    - name: Download Godot Export Templates
      run: |
        mkdir -p ~/Library/Application\ Support/Godot/export_templates/4.4.stable
        cd ~/Library/Application\ Support/Godot/export_templates/4.4.stable
        wget https://github.com/godotengine/godot/releases/download/4.4-stable/Godot_v4.4-stable_export_templates.tpz
        unzip Godot_v4.4-stable_export_templates.tpz
        mv templates/* .
        ls -la
        
    - name: Verify Godot installation and project files
      run: |
        echo "=== Godot Version ==="
        godot --version
        echo "=== Current Directory ==="
        pwd
        echo "=== Directory Contents ==="
        ls -la
        echo "=== Checking for required files ==="
        if [ -f "project.godot" ]; then
          echo "✅ project.godot found"
        else
          echo "❌ project.godot missing"
          exit 1
        fi
        if [ -f "export_presets.cfg" ]; then
          echo "✅ export_presets.cfg found"
        else
          echo "❌ export_presets.cfg missing"
          exit 1
        fi
        
    - name: Debug export presets
      run: |
        echo "=== Export Presets Content ==="
        cat export_presets.cfg | head -20
        echo "=== Searching for preset names in config ==="
        grep -n "name=" export_presets.cfg
        echo "=== Checking preset structure ==="
        grep -A 2 -B 2 "platform=" export_presets.cfg
        echo "=== Verifying iOS preset configuration ==="
        grep -A 5 -B 5 "NSLocalNetworkUsageDescription" export_presets.cfg || echo "NSLocalNetworkUsageDescription not found in presets"
        
    - name: Create build directory
      run: mkdir -p build
      
    - name: Export iOS Xcode project (with explicit working directory)
      run: |
        echo "=== Starting iOS Export ==="
        echo "Working directory: $(pwd)"
        echo "Godot version: $(godot --version)"
        
        # First, let's try to validate the project without export
        echo "=== Validating Godot project ==="
        godot --headless --validate-only --quit
        
        # Try the export command with explicit preset name
        echo "=== Attempting export with preset name 'iOS' ==="
        godot --headless --export-debug "iOS" build/LightLauncher.xcodeproj
        
        # Check if export was successful
        if [ $? -eq 0 ]; then
          echo "✅ Export command completed successfully"
        else
          echo "❌ Export command failed with preset name"
          echo "=== Trying alternative export methods ==="
          
          # Try with different preset name variations
          echo "Trying with preset index 1..."
          godot --headless --export-debug 1 build/LightLauncher.xcodeproj
          
          if [ $? -ne 0 ]; then
            echo "❌ Export with index also failed"
            echo "=== Checking if templates are properly installed ==="
            ls -la ~/Library/Application\ Support/Godot/export_templates/4.4.stable/
            echo "=== Checking export_presets.cfg format ==="
            # Check if the file has proper line endings
            file export_presets.cfg
            echo "=== Last few lines of export_presets.cfg ==="
            tail -10 export_presets.cfg
            exit 1
          fi
        fi
      env:
        DISPLAY: :99.0
        
    - name: Verify export
      run: |
        echo "=== Build Directory Contents ==="
        ls -la build/
        if [ -d "build/LightLauncher.xcodeproj" ]; then
          echo "✅ Xcode project exported successfully"
          ls -la build/LightLauncher.xcodeproj/
        else
          echo "❌ Xcode project export failed"
          echo "=== Looking for any exported files ==="
          find build/ -type f -name "*" | head -10
          exit 1
        fi
        
    - name: Verify plist configuration
      run: |
        echo "=== Verifying Info.plist configuration ==="
        INFO_PLIST_LOCATIONS=(
          "build/LightLauncher.xcodeproj/LightLauncher-Info.plist"
          "build/Info.plist"
          "build/LightLauncher/Info.plist"
        )
        
        INFO_PLIST=""
        for plist_path in "${INFO_PLIST_LOCATIONS[@]}"; do
          if [ -f "$plist_path" ]; then
            INFO_PLIST="$plist_path"
            echo "✅ Found Info.plist at: $INFO_PLIST"
            break
          fi
        done
        
        if [ -n "$INFO_PLIST" ]; then
          echo "=== Checking NSLocalNetworkUsageDescription ==="
          if /usr/libexec/PlistBuddy -c "Print :NSLocalNetworkUsageDescription" "$INFO_PLIST" 2>/dev/null; then
            echo "✅ NSLocalNetworkUsageDescription is properly configured"
          else
            echo "⚠️  NSLocalNetworkUsageDescription not found in plist"
          fi
          
          echo "=== Plist contents preview ==="
          /usr/libexec/PlistBuddy -c "Print" "$INFO_PLIST" | head -20
        else
          echo "⚠️  Info.plist not found at expected locations, searching..."
          find build/ -name "*Info.plist" -o -name "*.plist" | head -5
        fi
        
    - name: Configure iOS project for unsigned builds
      run: |
        PROJECT_FILE="build/LightLauncher.xcodeproj/project.pbxproj"
        
        if [ -f "$PROJECT_FILE" ]; then
          echo "=== Configuring project for unsigned builds ==="
          
          # Create backup
          cp "$PROJECT_FILE" "$PROJECT_FILE.backup"
          
          # Set iOS Deployment Target
          sed -i '' 's/IPHONEOS_DEPLOYMENT_TARGET = [^;]*;/IPHONEOS_DEPLOYMENT_TARGET = 14.0;/g' "$PROJECT_FILE"
          echo "✅ iOS deployment target updated to 14.0"
          
          # Force disable code signing for all configurations
          sed -i '' 's/CODE_SIGN_IDENTITY = [^;]*;/CODE_SIGN_IDENTITY = "";/g' "$PROJECT_FILE"
          sed -i '' 's/CODE_SIGNING_REQUIRED = [^;]*;/CODE_SIGNING_REQUIRED = NO;/g' "$PROJECT_FILE"
          sed -i '' 's/CODE_SIGNING_ALLOWED = [^;]*;/CODE_SIGNING_ALLOWED = NO;/g' "$PROJECT_FILE"
          sed -i '' 's/DEVELOPMENT_TEAM = [^;]*;/DEVELOPMENT_TEAM = "";/g' "$PROJECT_FILE"
          sed -i '' 's/PROVISIONING_PROFILE = [^;]*;/PROVISIONING_PROFILE = "";/g' "$PROJECT_FILE"
          sed -i '' 's/PROVISIONING_PROFILE_SPECIFIER = [^;]*;/PROVISIONING_PROFILE_SPECIFIER = "";/g' "$PROJECT_FILE"
          
          # Add explicit unsigned build settings if they don't exist
          if ! grep -q "CODE_SIGN_IDENTITY.*\"\"" "$PROJECT_FILE"; then
            # Add code signing settings to all build configurations
            awk '
            /buildSettings = \{/ {
              print $0
              print "\t\t\t\tCODE_SIGN_IDENTITY = \"\";"
              print "\t\t\t\tCODE_SIGNING_REQUIRED = NO;"
              print "\t\t\t\tCODE_SIGNING_ALLOWED = NO;"
              print "\t\t\t\tDEVELOPMENT_TEAM = \"\";"
              print "\t\t\t\tPROVISIONING_PROFILE = \"\";"
              print "\t\t\t\tPROVISIONING_PROFILE_SPECIFIER = \"\";"
              next
            }
            { print }
            ' "$PROJECT_FILE" > "$PROJECT_FILE.tmp" && mv "$PROJECT_FILE.tmp" "$PROJECT_FILE"
          fi
          
          echo "✅ Project configured for unsigned builds"
          
          # Verify the changes
          echo "=== Verifying unsigned build configuration ==="
          grep -n "CODE_SIGN_IDENTITY\|CODE_SIGNING_REQUIRED\|CODE_SIGNING_ALLOWED\|DEVELOPMENT_TEAM" "$PROJECT_FILE" | head -10
          
        else
          echo "❌ project.pbxproj not found"
          exit 1
        fi
        
    - name: Build iOS project (unsigned)
      run: |
        echo "=== Building unsigned iOS project ==="
        
        # Set up build environment to avoid signing
        export CODE_SIGN_IDENTITY=""
        export CODE_SIGNING_REQUIRED=NO
        export CODE_SIGNING_ALLOWED=NO
        export DEVELOPMENT_TEAM=""
        export PROVISIONING_PROFILE=""
        export PROVISIONING_PROFILE_SPECIFIER=""
        
        # Find the correct scheme name
        SCHEME_NAME="LightLauncher"
        if [ ! -f "build/LightLauncher.xcodeproj/xcshareddata/xcschemes/LightLauncher.xcscheme" ] && [ ! -f "build/LightLauncher.xcodeproj/project.xcworkspace/xcshareddata/xcschemes/LightLauncher.xcscheme" ]; then
          echo "=== Checking available schemes ==="
          xcodebuild -project build/LightLauncher.xcodeproj -list
          
          # Try to find the actual scheme name
          SCHEME_NAME=$(xcodebuild -project build/LightLauncher.xcodeproj -list | grep -A 10 "Schemes:" | tail -n +2 | head -n 1 | xargs)
          echo "=== Using scheme: $SCHEME_NAME ==="
        fi
        
        # Build the project
        xcodebuild -project build/LightLauncher.xcodeproj \
          -scheme "$SCHEME_NAME" \
          -configuration Debug \
          -archivePath build/LightLauncher.xcarchive \
          -destination 'generic/platform=iOS' \
          -allowProvisioningUpdates \
          archive \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          DEVELOPMENT_TEAM="" \
          PROVISIONING_PROFILE="" \
          PROVISIONING_PROFILE_SPECIFIER="" \
          ONLY_ACTIVE_ARCH=NO \
          ARCHS="arm64" \
          VALID_ARCHS="arm64" \
          ENABLE_BITCODE=NO \
          -quiet || {
            echo "❌ Build failed, trying alternative approach..."
            
            # Try building for simulator instead (for testing)
            echo "=== Attempting simulator build as fallback ==="
            xcodebuild -project build/LightLauncher.xcodeproj \
              -scheme "$SCHEME_NAME" \
              -configuration Debug \
              -archivePath build/LightLauncher-sim.xcarchive \
              -destination 'generic/platform=iOS Simulator' \
              archive \
              CODE_SIGN_IDENTITY="" \
              CODE_SIGNING_REQUIRED=NO \
              CODE_SIGNING_ALLOWED=NO \
              DEVELOPMENT_TEAM="" \
              ONLY_ACTIVE_ARCH=NO \
              ARCHS="x86_64 arm64" \
              VALID_ARCHS="x86_64 arm64" \
              -quiet
          }
        
    # Optional: Build with signing (requires secrets)
    - name: Build iOS project (signed)
      if: ${{ vars.ENABLE_CODE_SIGNING == 'true' }}
      run: |
        echo "=== Building signed iOS project ==="
        
        # Import certificate
        echo "${{ secrets.IOS_CERTIFICATE_BASE64 }}" | base64 --decode > certificate.p12
        security create-keychain -p temp_keychain_password build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p temp_keychain_password build.keychain
        security import certificate.p12 -k build.keychain -P "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k temp_keychain_password build.keychain
        
        # Import provisioning profile
        echo "${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > profile.mobileprovision
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
        
        # Restore signed build settings
        PROJECT_FILE="build/LightLauncher.xcodeproj/project.pbxproj"
        sed -i '' 's/CODE_SIGN_IDENTITY = "";/CODE_SIGN_IDENTITY = "iPhone Distribution";/g' "$PROJECT_FILE"
        sed -i '' 's/CODE_SIGNING_REQUIRED = NO;/CODE_SIGNING_REQUIRED = YES;/g' "$PROJECT_FILE"
        sed -i '' 's/CODE_SIGNING_ALLOWED = NO;/CODE_SIGNING_ALLOWED = YES;/g' "$PROJECT_FILE"
        sed -i '' 's/DEVELOPMENT_TEAM = "";/DEVELOPMENT_TEAM = "${{ secrets.APPLE_DEVELOPER_TEAM_ID }}";/g' "$PROJECT_FILE"
        
        # Build with signing
        SCHEME_NAME=$(xcodebuild -project build/LightLauncher.xcodeproj -list | grep -A 10 "Schemes:" | tail -n +2 | head -n 1 | xargs)
        xcodebuild -project build/LightLauncher.xcodeproj \
          -scheme "$SCHEME_NAME" \
          -configuration Release \
          -archivePath build/LightLauncher-signed.xcarchive \
          -destination 'generic/platform=iOS' \
          archive \
          DEVELOPMENT_TEAM="${{ secrets.APPLE_DEVELOPER_TEAM_ID }}"
          
    - name: Export IPA
      run: |
        cd build
        
        # Check for different archive types
        ARCHIVE_PATH=""
        if [ -d "LightLauncher.xcarchive" ]; then
          ARCHIVE_PATH="LightLauncher.xcarchive"
        elif [ -d "LightLauncher-signed.xcarchive" ]; then
          ARCHIVE_PATH="LightLauncher-signed.xcarchive"
        elif [ -d "LightLauncher-sim.xcarchive" ]; then
          ARCHIVE_PATH="LightLauncher-sim.xcarchive"
          echo "⚠️  Using simulator archive - this won't run on real devices"
        fi
        
        if [ -n "$ARCHIVE_PATH" ]; then
          echo "✅ Found archive: $ARCHIVE_PATH"
          cd "$ARCHIVE_PATH/Products/Applications"
          
          # Create Payload directory
          mkdir -p Payload
          
          # Find and move the .app bundle
          APP_BUNDLE=$(find . -maxdepth 1 -name "*.app" | head -1)
          if [ -n "$APP_BUNDLE" ]; then
            mv "$APP_BUNDLE" Payload/
            echo "✅ Moved app bundle: $APP_BUNDLE"
          else
            echo "❌ No .app bundle found"
            ls -la
            exit 1
          fi
          
          # Create IPA
          zip -r ../../../LightLauncher.ipa Payload/
          cd ../../../
          
          if [ -f "LightLauncher.ipa" ]; then
            echo "✅ IPA created successfully"
            ls -la LightLauncher.ipa
            
            # Get IPA info
            unzip -l LightLauncher.ipa | head -10
          else
            echo "❌ IPA creation failed"
            exit 1
          fi
        else
          echo "❌ No archive found"
          ls -la
          exit 1
        fi
        
    - name: Upload IPA to GitHub Artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: LightLauncher-iOS-${{ github.run_number }}
        path: build/LightLauncher.ipa
        retention-days: 30
        
    - name: Upload Xcode project to GitHub Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: LightLauncher-Xcode-Project-${{ github.run_number }}
        path: build/LightLauncher.xcodeproj
        retention-days: 7
        
    - name: Upload build logs (on failure)
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs-${{ github.run_number }}
        path: |
          build/LightLauncher.xcodeproj/project.pbxproj.backup
          build/LightLauncher.xcodeproj/project.pbxproj
        retention-days: 7
